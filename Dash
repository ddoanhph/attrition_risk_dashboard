import dash
from dash import dcc, html, Input, Output, State, dash_table
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
from sklearn.ensemble import GradientBoostingClassifier
from sklearn.preprocessing import LabelEncoder, StandardScaler
import dash_bootstrap_components as dbc
from collections import Counter

# Initialize the Dash app
app = dash.Dash(__name__, external_stylesheets=[dbc.themes.BOOTSTRAP])
server = app.server

# Function to load and prepare data
def load_data():
    # Create synthetic data for demonstration
    np.random.seed(42)
    n_samples = 800

    # Using the actual Job Family Groups from your dataset
    job_family_groups = [
        'Manuf., Assembly, Integr. & Test <FU-MA>',
        'Management <FU-FA>',
        'Customer Services and Support <FU-CS>',
        'Engineering <FU-EN>',
        'Quality <FU-QU>',
        'Supply Management <FU-SM>',
        'P&PM and Configuration Mgmt <FU-PP>',
        'Marketing, Sales & Commercial Contracts <FU-MC>',
        'Corporate Governance <FU-CG>',
        'Finance <FU-FI>',
        'Digital <FU-IM>',
        'Human Resources <FU-HR>',
        'Business Improvement <FU-BI>',
        'Health & Safety <FU-HS>'
    ]

    # Distribution weights based on the counts you provided
    job_family_group_weights = [
        0.28, 0.13, 0.13, 0.10, 0.09, 0.09, 0.05,
        0.03, 0.03, 0.02, 0.02, 0.02, 0.01, 0.00
    ]

    # Create divisions based on job family groups
    divisions = {
        'Manufacturing': ['Manuf., Assembly, Integr. & Test <FU-MA>', 'Quality <FU-QU>'],
        'Management': ['Management <FU-FA>', 'Corporate Governance <FU-CG>'],
        'Customer Operations': ['Customer Services and Support <FU-CS>', 'Marketing, Sales & Commercial Contracts <FU-MC>'],
        'Engineering': ['Engineering <FU-EN>', 'Digital <FU-IM>'],
        'Supply Chain': ['Supply Management <FU-SM>', 'P&PM and Configuration Mgmt <FU-PP>'],
        'Support Functions': ['Finance <FU-FI>', 'Human Resources <FU-HR>', 'Business Improvement <FU-BI>', 'Health & Safety <FU-HS>']
    }

    bands = ['BZ', 'BII', 'BIII', 'BIV', 'BV']
    regions = ['USA']
    age_groups = ['20-30', '31-40', '41-50', '51+']

    data = {
        'Corp_ID': [f'E{i:04d}' for i in range(1, n_samples + 1)],
        'Attrition': np.random.choice([0, 1], size=n_samples, p=[0.89, 0.11]),
        'Job_Family_Group': np.random.choice(job_family_groups, size=n_samples, p=job_family_group_weights),
        'Band': np.random.choice(bands, size=n_samples, p=[0.3, 0.3, 0.2, 0.15, 0.05]),
        'Location_Region': np.random.choice(regions, size=n_samples),
        'Age_Group': np.random.choice(age_groups, size=n_samples),
        'Career_Velocity': np.random.uniform(0.1, 2.0, size=n_samples),
        'Role_Stability': np.random.uniform(0, 1, size=n_samples),
        'Career_Growth_Score': np.random.uniform(1, 10, size=n_samples),
        'Employment_Complexity': np.random.randint(0, 5, size=n_samples),
        'Division_Transfer_Rate': np.random.uniform(0, 0.5, size=n_samples)
    }

    df = pd.DataFrame(data)

    # Assign divisions based on job family groups
    df['Division'] = df['Job_Family_Group'].apply(
        lambda x: next((div for div, groups in divisions.items() if x in groups), 'Other')
    )

    # Ensure higher attrition rates for certain conditions to make the data more realistic
    mask = (df['Role_Stability'] < 0.3) & (df['Attrition'] == 0)
    flip_indices = np.random.choice(df[mask].index, size=int(len(df[mask]) * 0.3), replace=False)
    df.loc[flip_indices, 'Attrition'] = 1

    # Make certain job family groups more prone to attrition
    high_risk_groups = ['Digital <FU-IM>', 'Engineering <FU-EN>']
    mask = (df['Job_Family_Group'].isin(high_risk_groups)) & (df['Attrition'] == 0)
    flip_indices = np.random.choice(df[mask].index, size=int(len(df[mask]) * 0.2), replace=False)
    df.loc[flip_indices, 'Attrition'] = 1

    # Make certain divisions more prone to attrition
    high_risk_divisions = ['Engineering', 'Supply Chain']
    mask = (df['Division'].isin(high_risk_divisions)) & (df['Attrition'] == 0)
    flip_indices = np.random.choice(df[mask].index, size=int(len(df[mask]) * 0.15), replace=False)
    df.loc[flip_indices, 'Attrition'] = 1

    return df

# Function to train model and get predictions
def get_predictions(df):
    # Features to use for prediction
    feature_cols = [
        'Career_Velocity', 'Role_Stability', 'Career_Growth_Score',
        'Employment_Complexity', 'Division_Transfer_Rate'
    ]

    # Prepare data for modeling
    X = df[feature_cols]
    y = df['Attrition']

    # Train a model
    model = GradientBoostingClassifier(random_state=42)
    model.fit(X, y)

    # Get predictions and probabilities
    df['Predicted_Attrition'] = model.predict(X)
    df['Attrition_Risk'] = model.predict_proba(X)[:, 1]

    # Add risk category
    df['Risk_Category'] = pd.cut(
        df['Attrition_Risk'],
        bins=[0, 0.3, 0.6, 1],
        labels=['Low', 'Medium', 'High']
    )

    # Get feature importance
    feature_importance = pd.DataFrame({
        'Feature': feature_cols,
        'Importance': model.feature_importances_
    }).sort_values('Importance', ascending=False)

    # For demonstration purposes, we'll simulate SHAP values
    def get_key_factors(row):
        factors = []
        if row['Role_Stability'] < 0.3:
            factors.append('Low Role Stability')
        if row['Career_Velocity'] > 1.5:
            factors.append('High Career Velocity')
        if row['Career_Growth_Score'] < 4:
            factors.append('Low Career Growth Score')
        if row['Employment_Complexity'] > 3:
            factors.append('High Employment Complexity')
        if row['Division_Transfer_Rate'] < 0.1:
            factors.append('Low Division Transfer Rate')

        return ', '.join(factors[:2]) if factors else 'No significant factors'

    df['Key_Factors'] = df.apply(get_key_factors, axis=1)

    return df, model, feature_importance

# Load data and get predictions
df = load_data()
df_with_predictions, model, feature_importance = get_predictions(df)

# Define the layout
app.layout = dbc.Container([
    dbc.Row([
        dbc.Col([
            html.H1('Employee Attrition Risk Dashboard', className='text-center my-4')
        ])
    ]),
    
    dbc.Row([
        # Sidebar filters
        dbc.Col([
            html.H4('Filters'),
            html.Hr(),
            
            html.P('Select Divisions:'),
            dcc.Checklist(
                id='division-filter',
                options=[{'label': div, 'value': div} for div in sorted(df['Division'].unique())],
                value=sorted(df['Division'].unique()),
                labelStyle={'display': 'block'}
            ),
            
            html.P('Select Bands:', className='mt-3'),
            dcc.Checklist(
                id='band-filter',
                options=[{'label': band, 'value': band} for band in sorted(df['Band'].unique())],
                value=sorted(df['Band'].unique()),
                labelStyle={'display': 'block'}
            ),
            
            html.P('Select Regions:', className='mt-3'),
            dcc.Checklist(
                id='region-filter',
                options=[{'label': region, 'value': region} for region in sorted(df['Location_Region'].unique())],
                value=sorted(df['Location_Region'].unique()),
                labelStyle={'display': 'block'}
            ),
            
            html.P('Risk Category:', className='mt-3'),
            dcc.Checklist(
                id='risk-filter',
                options=[
                    {'label': 'High', 'value': 'High'},
                    {'label': 'Medium', 'value': 'Medium'},
                    {'label': 'Low', 'value': 'Low'}
                ],
                value=['High', 'Medium', 'Low'],
                labelStyle={'display': 'block'}
            ),
        ], width=2),
        
        # Main dashboard content
        dbc.Col([
            # Top metrics cards
            dbc.Row([
                dbc.Col([
                    dbc.Card([
                        dbc.CardBody([
                            html.H5('Predicted Attrition', className='card-title'),
                            html.H2(id='predicted-attrition', className='card-text'),
                            html.P(id='attrition-rate', className='card-text text-muted')
                        ])
                    ])
                ]),
                dbc.Col([
                    dbc.Card([
                        dbc.CardBody([
                            html.H5('High Risk Employees', className='card-title'),
                            html.H2(id='high-risk-count', className='card-text'),
                            html.P(id='high-risk-percentage', className='card-text text-muted')
                        ])
                    ])
                ]),
                dbc.Col([
                    dbc.Card([
                        dbc.CardBody([
                            html.H5('Average Attrition Risk', className='card-title'),
                            html.H2(id='avg-risk', className='card-text'),
                            html.P('Across all selected employees', className='card-text text-muted')
                        ])
                    ])
                ])
            ]),
            
            # Attrition by category
            dbc.Row([
                dbc.Col([
                    html.H4('Attrition by Category', className='mt-4'),
                    dcc.RadioItems(
                        id='category-selector',
                        options=[
                            {'label': 'Division', 'value': 'Division'},
                            {'label': 'Job Family Group', 'value': 'Job_Family_Group'},
                            {'label': 'Band', 'value': 'Band'},
                            {'label': 'Region', 'value': 'Location_Region'},
                            {'label': 'Age Group', 'value': 'Age_Group'}
                        ],
                        value='Division',
                        inline=True,
                        className='mb-2'
                    ),
                    dcc.Graph(id='attrition-by-category')
                ])
            ]),
            
            # Feature importance and risk distribution
            dbc.Row([
                dbc.Col([
                    html.H4('Top Attrition Risk Factors', className='mt-4'),
                    dcc.Graph(id='feature-importance')
                ], width=6),
                dbc.Col([
                    html.H4('Risk Distribution', className='mt-4'),
                    dcc.Graph(id='risk-distribution')
                ], width=6)
            ]),
            
            # High risk divisions
            dbc.Row([
                dbc.Col([
                    html.H4('Division Risk Analysis', className='mt-4'),
                    html.Div(id='division-risk-table')
                ])
            ]),
            
            # Division risk heatmap
            dbc.Row([
                dbc.Col([
                    html.H4('Division Risk Heatmap', className='mt-4'),
                    dcc.Graph(id='division-heatmap')
                ])
            ]),
            
            # Recommendations
            dbc.Row([
                dbc.Col([
                    html.H4('Recommended Actions', className='mt-4'),
                    dbc.Row([
                        dbc.Col([
                            dbc.Card([
                                dbc.CardBody([
                                    html.H5(id='rec-division-title', className='card-title'),
                                    html.P(id='rec-division-text', className='card-text')
                                ])
                            ], color="info", outline=True)
                        ]),
                        dbc.Col([
                            dbc.Card([
                                dbc.CardBody([
                                    html.H5(id='rec-band-title', className='card-title'),
                                    html.P(id='rec-band-text', className='card-text')
                                ])
                            ], color="info", outline=True)
                        ]),
                        dbc.Col([
                            dbc.Card([
                                dbc.CardBody([
                                    html.H5(id='rec-factors-title', className='card-title'),
                                    html.P(id='rec-factors-text', className='card-text')
                                ])
                            ], color="info", outline=True)
                        ])
                    ])
                ])
            ])
        ], width=10)
    ]),
    
    # Footer
    dbc.Row([
        dbc.Col([
            html.Hr(),
            html.P('Note: This dashboard uses predictive modeling to identify attrition risks by division. '
                   'All predictions should be verified with qualitative assessment before taking action.',
                   className='text-muted')
        ])
    ])
], fluid=True)

# Callbacks
@app.callback(
    [Output('predicted-attrition', 'children'),
     Output('attrition-rate', 'children'),
     Output('high-risk-count', 'children'),
     Output('high-risk-percentage', 'children'),
     Output('avg-risk', 'children')],
    [Input('division-filter', 'value'),
     Input('band-filter', 'value'),
     Input('region-filter', 'value'),
     Input('risk-filter', 'value')]
)
def update_metrics(selected_divisions, selected_bands, selected_regions, selected_risk):
    # Filter the dataframe
    filtered_df = df_with_predictions[
        (df_with_predictions['Division'].isin(selected_divisions)) &
        (df_with_predictions['Band'].isin(selected_bands)) &
        (df_with_predictions['Location_Region'].isin(selected_regions)) &
        (df_with_predictions['Risk_Category'].isin(selected_risk))
    ]
    
    # Calculate metrics
    total_employees = len(filtered_df)
    predicted_attrition = filtered_df['Predicted_Attrition'].sum()
    attrition_rate = (predicted_attrition / total_employees * 100) if total_employees > 0 else 0
    
    # Calculate risk metrics
    risk_counts = filtered_df['Risk_Category'].value_counts().to_dict()
    high_risk = risk_counts.get('High', 0)
    high_risk_pct = (high_risk / total_employees * 100) if total_employees > 0 else 0
    
    # Calculate average risk
    avg_risk = filtered_df['Attrition_Risk'].mean() * 100 if not filtered_df.empty else 0
    
    return (
        f"{int(predicted_attrition)}",
        f"{attrition_rate:.1f}% of {total_employees} employees",
        f"{high_risk}",
        f"{high_risk_pct:.1f}% of total",
        f"{avg_risk:.1f}%"
    )

@app.callback(
    Output('attrition-by-category', 'figure'),
    [Input('category-selector', 'value'),
     Input('division-filter', 'value'),
     Input('band-filter', 'value'),
     Input('region-filter', 'value'),
     Input('risk-filter', 'value')]
)
def update_attrition_by_category(selected_category, selected_divisions, selected_bands, selected_regions, selected_risk):
    # Filter the dataframe
    filtered_df = df_with_predictions[
        (df_with_predictions['Division'].isin(selected_divisions)) &
        (df_with_predictions['Band'].isin(selected_bands)) &
        (df_with_predictions['Location_Region'].isin(selected_regions)) &
        (df_with_predictions['Risk_Category'].isin(selected_risk))
    ]
    
    # Calculate attrition metrics by selected category
    category_attrition = filtered_df.groupby(selected_category).agg(
        Total=('Corp_ID', 'count'),
        Attrition=('Predicted_Attrition', 'sum')
    )
    category_attrition['Rate'] = (category_attrition['Attrition'] / category_attrition['Total'] * 100).round(1)
    category_attrition = category_attrition.reset_index().sort_values('Rate', ascending=False)
    
    # Create figure
    fig = make_subplots(specs=[[{"secondary_y": True}]])
    
    fig.add_trace(
        go.Bar(
            x=category_attrition[selected_category],
            y=category_attrition['Attrition'],
            name="Predicted Attrition",
            marker_color='rgba(55, 83, 109, 0.7)'
        )
    )
    
    fig.add_trace(
        go.Scatter(
            x=category_attrition[selected_category],
            y=category_attrition['Rate'],
            name="Attrition Rate (%)",
            mode='lines+markers',
            marker_color='rgba(255, 79, 38, 0.7)',
            line=dict(width=2)
        ),
        secondary_y=True
    )
    
    fig.update_layout(
        title_text=f'Attrition by {selected_category.replace("_", " ")}',
        xaxis_title=selected_category.replace("_", " "),
        legend=dict(
            orientation="h",
            yanchor="bottom",
            y=1.02,
            xanchor="right",
            x=1
        ),
        height=400
    )
    
    fig.update_yaxes(title_text="Number of Employees", secondary_y=False)
    fig.update_yaxes(title_text="Attrition Rate (%)", secondary_y=True)
    
    return fig

@app.callback(
    Output('feature-importance', 'figure'),
    [Input('division-filter', 'value'),
     Input('band-filter', 'value'),
     Input('region-filter', 'value'),
     Input('risk-filter', 'value')]
)
def update_feature_importance(selected_divisions, selected_bands, selected_regions, selected_risk):
    # Create horizontal bar chart for feature importance
    fig = px.bar(
        feature_importance.head(5),
        x='Importance',
        y='Feature',
        orientation='h',
        labels={'Importance': 'Relative Importance', 'Feature': ''},
        color='Importance',
        color_continuous_scale=px.colors.sequential.Blues
    )
    
    fig.update_layout(
        height=300,
        yaxis=dict(autorange="reversed"),
        coloraxis_showscale=False
    )
    
    return fig

@app.callback(
    Output('risk-distribution', 'figure'),
    [Input('division-filter', 'value'),
     Input('band-filter', 'value'),
     Input('region-filter', 'value'),
     Input('risk-filter', 'value')]
)
def update_risk_distribution(selected_divisions, selected_bands, selected_regions, selected_risk):
    # Filter the dataframe
    filtered_df = df_with_predictions[
        (df_with_predictions['Division'].isin(selected_divisions)) &
        (df_with_predictions['Band'].isin(selected_bands)) &
        (df_with_predictions['Location_Region'].isin(selected_regions)) &
        (df_with_predictions['Risk_Category'].isin(selected_risk))
    ]
    
    # Create pie chart
    fig = px.pie(
        filtered_df,
        names='Risk_Category',
        values='Corp_ID',
        color='Risk_Category',
        color_discrete_map={'High': 'red', 'Medium': 'orange', 'Low': 'green'},
        hole=0.4
    )
    
    fig.update_layout(height=300)
    
    return fig

@app.callback(
    Output('division-risk-table', 'children'),
    [Input('division-filter', 'value'),
     Input('band-filter', 'value'),
     Input('region-filter', 'value'),
     Input('risk-filter', 'value')]
)
def update_division_risk_table(selected_divisions, selected_bands, selected_regions, selected_risk):
    # Filter the dataframe
    filtered_df = df_with_predictions[
        (df_with_predictions['Division'].isin(selected_divisions)) &
        (df_with_predictions['Band'].isin(selected_bands)) &
        (df_with_predictions['Location_Region'].isin(selected_regions)) &
        (df_with_predictions['Risk_Category'].isin(selected_risk))
    ]
    
    # Calculate risk metrics by division
    division_risk = filtered_df.groupby('Division').agg(
        Total_Employees=('Corp_ID', 'count'),
        High_Risk_Count=(filtered_df['Risk_Category'] == 'High', 'sum'),
        Average_Risk=('Attrition_Risk', 'mean'),
        Predicted_Attrition=('Predicted_Attrition', 'sum')
    )
    
    division_risk['High_Risk_Percentage'] = (
        division_risk['High_Risk_Count'] / division_risk['Total_Employees'] * 100).round(1)
    division_risk['Attrition_Rate'] = (
        division_risk['Predicted_Attrition'] / division_risk['Total_Employees'] * 100).round(1)
    division_risk = division_risk.reset_index().sort_values('High_Risk_Percentage', ascending=False)
    
    # Get most common risk factors for each division
    def get_top_factors_for_division(division):
        division_df = filtered_df[filtered_df['Division'] == division]
        factors = []
        for factor in division_df['Key_Factors'].str.split(', '):
            if isinstance(factor, list):
                factors.extend(factor)
        
        if factors:
            common = Counter(factors).most_common(2)
            return ', '.join([f"{item[0]}" for item in common])
        return "No significant factors"
    
    division_risk['Key_Risk_Factors'] = division_risk['Division'].apply(get_top_factors_for_division)
    
    # Prepare display dataframe
    display_df = division_risk.rename(columns={
        'Division': 'Division',
        'Total_Employees': 'Total Employees',
        'High_Risk_Count': 'High Risk Count',
        'High_Risk_Percentage': 'High Risk %',
        'Average_Risk': 'Avg Risk Score',
        'Attrition_Rate': 'Attrition Rate %',
        'Key_Risk_Factors': 'Key Risk Factors'
    })
    
    # Format risk score as percentage
    display_df['Avg Risk Score'] = display_df['Avg Risk Score'].apply(lambda x: f"{x:.1%}")
    
    # Create datatable
    table = dash_table.DataTable(
        data=display_df.to_dict('records'),
        columns=[
            {'name': 'Division', 'id': 'Division'},
            {'name': 'Total Employees', 'id': 'Total Employees'},
            {'name': 'High Risk Count', 'id': 'High Risk Count'},
            {'name': 'High Risk %', 'id': 'High Risk %'},
            {'name': 'Avg Risk Score', 'id': 'Avg Risk Score'},
            {'name': 'Attrition Rate %', 'id': 'Attrition Rate %'},
            {'name': 'Key Risk Factors', 'id': 'Key Risk Factors'}
        ],
        style_table={'overflowX': 'auto'},
        style_header={
            'backgroundColor': 'rgb(230, 230, 230)',
            'fontWeight': 'bold'
        },
        style_cell={
            'textAlign': 'left',
            'padding': '8px'
        },
        style_data_conditional=[
            {
                'if': {'row_index': 'odd'},
                'backgroundColor': 'rgb(248, 248, 248)'
            }
        ]
    )
    
    return table

@app.callback(
    Output('division-heatmap', 'figure'),
    [Input('division-filter', 'value'),
     Input('band-filter', 'value'),
     Input('region-filter', 'value'),
     Input('risk-filter', 'value')]
)
def update_division_heatmap(selected_divisions, selected_bands, selected_regions, selected_risk):
    # Filter the dataframe
    filtered_df = df_with_predictions[
        (df_with_predictions['Division'].isin(selected_divisions)) &
        (df_with_predictions['Band'].isin(selected_bands)) &
        (df_with_predictions['Location_Region'].isin(selected_regions)) &
        (df_with_predictions['Risk_Category'].isin(selected_risk))
    ]
    
    # Create pivot table for heatmap
    if len(selected_divisions) > 1:
        # Create a pivot table showing risk distribution by division
        pivot = pd.crosstab(
            index=filtered_df['Division'],
            columns=filtered_df['Risk_Category'],
            normalize='index'
        ) * 100
        
        # Ensure all risk categories are present
        for cat in ['Low', 'Medium', 'High']:
            if cat not in pivot.columns:
                pivot[cat] = 0
        
        # Sort pivot table by high risk percentage
        pivot = pivot.sort_values('High', ascending=False)
        
        # Create heatmap
        fig = px.imshow(
            pivot,
            text_auto='.1f',
            aspect="auto",
            color_continuous_scale='RdYlGn_r',
            labels=dict(x='Risk Category', y='Division', color='Percentage'),
            x=['High', 'Medium', 'Low']  # Force this order
        )
        
        fig.update_layout(
            height=400,
            coloraxis_colorbar=dict(title='Percentage')
        )
    else:
        # If only one division is selected, show a message
        fig = go.Figure()
        fig.add_annotation(
            text="Please select multiple divisions to generate a heatmap",
            showarrow=False,
            font=dict(size=16)
        )
        fig.update_layout(height=400)
    
    return fig

@app.callback(
    [Output('rec-division-title', 'children'),
     Output('rec-division-text', 'children'),
     Output('rec-band-title', 'children'),
     Output('rec-band-text', 'children'),
     Output('rec-factors-title', 'children'),
     Output('rec-factors-text', 'children')],
    [Input('division-filter', 'value'),
     Input('band-filter', 'value'),
     Input('region-filter', 'value'),
     Input('risk-filter', 'value')]
)
def update_recommendations(selected_divisions, selected_bands, selected_regions, selected_risk):
    # Filter the dataframe
    filtered_df = df_with_predictions[
        (df_with_predictions['Division'].isin(selected_divisions)) &
        (df_with_predictions['Band'].isin(selected_bands)) &
        (df_with_predictions['Location_Region'].isin(selected_regions)) &
        (df_with_predictions['Risk_Category'].isin(selected_risk))
    ]
    
    # Calculate risk metrics by division
    division_risk = filtered_df.groupby('Division').agg(
        Total_Employees=('Corp_ID', 'count'),
        High_Risk_Count=(filtered_df['Risk_Category'] == 'High', 'sum'),
        Average_Risk=('Attrition_Risk', 'mean'),
        Predicted_Attrition=('Predicted_Attrition', 'sum')
    )
    
    division_risk['High_Risk_Percentage'] = (
        division_risk['High_Risk_Count'] / division_risk['Total_Employees'] * 100).round(1)
    division_risk = division_risk.reset_index().sort_values('High_Risk_Percentage', ascending=False)
    
    # Get top division with highest risk
    top_division = division_risk.iloc[0]['Division'] if not division_risk.empty else "N/A"
    top_division_risk = division_risk.iloc[0]['High_Risk_Percentage'] if not division_risk.empty else 0
    
    # Get most common risk factors for the top division
    top_division_df = filtered_df[filtered_df['Division'] == top_division]
    top_factors = []
    for factor in top_division_df['Key_Factors'].str.split(', '):
        if isinstance(factor, list):
            top_factors.extend(factor)
    
    top_factors_text = "No significant factors"
    if top_factors:
        common = Counter(top_factors).most_common(2)
        top_factors_text = ', '.join([f"{item[0]}" for item in common])
    
    # Get most common band in high risk employees
    high_risk_df = filtered_df[filtered_df['Risk_Category'] == 'High']
    most_common_band = high_risk_df['Band'].mode()[0] if not high_risk_df.empty else "N/A"
    
    # Generate recommendations
    return (

@app.callback(
    [Output('rec-division-title', 'children'),
     Output('rec-division-text', 'children'),
     Output('rec-band-title', 'children'),
     Output('rec-band-text', 'children'),
     Output('rec-factors-title', 'children'),
     Output('rec-factors-text', 'children')],
    [Input('division-filter', 'value'),
     Input('band-filter', 'value'),
     Input('region-filter', 'value'),
     Input('risk-filter', 'value')]
)
def update_recommendations(selected_divisions, selected_bands, selected_regions, selected_risk):
    # Filter the dataframe
    filtered_df = df_with_predictions[
        (df_with_predictions['Division'].isin(selected_divisions)) &
        (df_with_predictions['Band'].isin(selected_bands)) &
        (df_with_predictions['Location_Region'].isin(selected_regions)) &
        (df_with_predictions['Risk_Category'].isin(selected_risk))
    ]
    
    # Calculate risk metrics by division
    division_risk = filtered_df.groupby('Division').agg(
        Total_Employees=('Corp_ID', 'count'),
        High_Risk_Count=(filtered_df['Risk_Category'] == 'High', 'sum'),
        Average_Risk=('Attrition_Risk', 'mean'),
        Predicted_Attrition=('Predicted_Attrition', 'sum')
    )
    
    division_risk['High_Risk_Percentage'] = (
        division_risk['High_Risk_Count'] / division_risk['Total_Employees'] * 100).round(1)
    division_risk = division_risk.reset_index().sort_values('High_Risk_Percentage', ascending=False)
    
    # Get top division with highest risk
    top_division = division_risk.iloc[0]['Division'] if not division_risk.empty else "N/A"
    top_division_risk = division_risk.iloc[0]['High_Risk_Percentage'] if not division_risk.empty else 0
    
    # Get most common risk factors for the top division
    top_division_df = filtered_df[filtered_df['Division'] == top_division]
    top_factors = []
    for factor in top_division_df['Key_Factors'].str.split(', '):
        if isinstance(factor, list):
            top_factors.extend(factor)
    
    top_factors_text = "No significant factors"
    if top_factors:
        common = Counter(top_factors).most_common(2)
        top_factors_text = ', '.join([f"{item[0]}" for item in common])
    
    # Get most common band in high risk employees
    high_risk_df = filtered_df[filtered_df['Risk_Category'] == 'High']
    most_common_band = high_risk_df['Band'].mode()[0] if not high_risk_df.empty else "N/A"
    
    # Generate recommendations
    division_title = f"Focus on {top_division}"
    division_text = (
        f"This division has {top_division_risk:.1f}% of employees at high risk. "
        f"Conduct stay interviews and engagement surveys to identify specific concerns. "
        f"Consider targeted retention strategies for critical roles."
    )
    
    band_title = f"Address Band {most_common_band} Concerns"
    band_text = (
        f"Band {most_common_band} shows the highest concentration of at-risk employees. "
        f"Review compensation structures, career progression paths, and workload distribution. "
        f"Consider implementing mentorship programs or career development workshops."
    )
    
    factors_title = "Target Key Risk Factors"
    factors_text = (
        f"The most common risk factors are {top_factors_text}. "
        f"Develop targeted initiatives to address these specific concerns. "
        f"Consider pulse surveys to track improvement in these areas."
    )
    
    return division_title, division_text, band_title, band_text, factors_title, factors_text

# Run the app
if __name__ == '__main__':
    app.run_server(debug=True)
